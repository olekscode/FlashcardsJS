{"version":3,"sources":["components/Box.js","util/random.js","models/BoxModel.js","components/AddCardForm.js","components/MatchCardsExercise.js","components/SelectDefinitionExercise.js","components/FlipcardsApp.js","index.js"],"names":["Box","props","numberOfCards","randomInteger","from","to","Math","floor","random","weightedRandomChoice","array","weights","sum","reduce","a","b","normalizedWeights","map","weight","cumulativeWeights","randomNumber","findIndex","shuffle","i","length","j","BoxModel","cards","probability","this","card","some","_card","source","target","push","splice","indexOf","AddCardForm","state","handleSubmit","bind","handleInputChange","event","onSubmit","exception","alert","preventDefault","name","value","setState","type","onChange","required","React","Component","ToggleButton","handleClick","onClick","style","color","active","MatchCardsExercise","shuffledSources","shuffledTargets","activeSource","undefined","activeTarget","result","passed","Set","failed","has","add","console","log","selectedSource","selectedTarget","find","recordCorrectAnswer","filter","recordWrongAnswer","checkAnswer","key","handleSourceButtonClick","handleTargetButtonClick","FlipcardsApp","boxes","box","parseFloat","boxSizes","updateBoxSizes","nonEmptyBoxes","isEmpty","probabilities","chooseRandomNonEmptyBox","chooseRandomCard","randomCard","randomCardIndex","uniqueWeightedCards","flat","unique","item","_item","uniqueCards","randomCards","includesCardWithSource","validateNewCard","addCard","fromBoxNumber","toBoxNumber","removeCard","currentBoxNumber","includesCard","nextBoxNumber","moveCard","forEach","moveCardForward","moveCardBackward","boxSize","chooseRandomCardsWithoutRepetition","handleExerciseResult","app","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a089f26.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Box(props) {\n  return (\n    <div>Box: {props.numberOfCards}</div>\n  );\n}\n\nexport default Box;\n","export function randomInteger(from, to) {\n  return Math.floor(Math.random() * (to - from)) + from;\n}\n\nexport function randomChoice(array) {\n  return array[randomInteger(0, array.length)];\n}\n\nexport function weightedRandomChoice(array, weights) {\n  let sum = weights.reduce((a, b) => a + b, 0);\n  const normalizedWeights = weights.map(weight => weight / sum);\n\n  sum = 0;\n\n  const cumulativeWeights = normalizedWeights.map(weight =>\n    sum = sum + weight\n  );\n\n  const randomNumber = Math.random();\n  const index = cumulativeWeights.findIndex(weight => weight >= randomNumber);\n\n  return array[index];\n}\n\nexport function shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = randomInteger(0, i + 1);\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n","import {randomChoice} from \"../util/random\";\n\nclass BoxModel {\n  constructor(cards, probability) {\n    this.cards = cards;\n    this.probability = probability;\n  }\n\n  get numberOfCards() {\n    return this.cards.length;\n  }\n\n  isEmpty() {\n    return this.numberOfCards === 0;\n  }\n\n  includesCard(card) {\n    return this.cards.some(_card =>\n      _card.source === card.source && _card.target === card.target\n    );\n  }\n\n  includesCardWithSource(source) {\n    return this.cards.some(card =>\n      card.source === source\n    );\n  }\n\n  addCard(card) {\n    this.cards.push(card);\n  }\n\n  removeCard(card) {\n    this.cards.splice(this.cards.indexOf(card), 1);\n  }\n\n  chooseRandomCard() {\n    return randomChoice(this.cards);\n  }\n}\n\nexport default BoxModel;\n","import React from \"react\";\n\nclass AddCardForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      source: \"\",\n      target: \"\"\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleSubmit(event) {\n    try {\n      this.props.onSubmit(this.state);\n    }\n    catch(exception) {\n      alert(exception);\n    }\n    event.preventDefault();\n  }\n\n  handleInputChange(event) {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({[name]: value});\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Source:\n          <input\n            type=\"text\"\n            name=\"source\"\n            value={this.state.source}\n            onChange={this.handleInputChange}\n            required={true} />\n        </label>\n        <label>\n          Target:\n          <input\n            type=\"text\"\n            name=\"target\"\n            value={this.state.target}\n            onChange={this.handleInputChange}\n            required={true} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default AddCardForm;\n","import React from \"react\";\nimport {shuffle} from \"../util/random\";\n\nclass ToggleButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    this.props.onClick(this.props.value);\n  }\n\n  render() {\n    return (\n      <button\n        style={{color: this.props.active ? \"red\" : \"black\"}}\n        onClick={this.handleClick}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nclass MatchCardsExercise extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const shuffledSources = this.props.cards.map(card => card.source);\n    const shuffledTargets = this.props.cards.map(card => card.target);\n\n    shuffle(shuffledSources);\n    shuffle(shuffledTargets);\n\n    this.state = {\n      activeSource: undefined,\n      activeTarget: undefined,\n      shuffledSources: shuffledSources,\n      shuffledTargets: shuffledTargets\n    };\n\n    this.result = {\n      passed: new Set(),\n      failed: new Set()\n    };\n  }\n\n  recordCorrectAnswer(card) {\n    // If a card was already failed, it can't pass\n    if (!this.result.failed.has(card))\n      this.result.passed.add(card);\n    console.log(this.result);\n  }\n\n  recordWrongAnswer(card) {\n    this.result.failed.add(card);\n    console.log(this.result);\n  }\n\n  checkAnswer(state, props, selectedSource, selectedTarget) {\n    // Checking the answer\n    const card = props.cards.find(_card =>\n      _card.source === selectedSource);\n\n    if (selectedTarget === card.target) {\n      // Answer is correct\n      this.recordCorrectAnswer(card);\n\n      return {\n        activeSource: undefined,\n        activeTarget: undefined,\n        shuffledSources: state.shuffledSources.filter(source =>\n          source !== card.source),\n        shuffledTargets: state.shuffledTargets.filter(target =>\n          target !== card.target)\n      }\n    }\n    else{\n      // Answer is wrong\n      this.recordWrongAnswer(card);\n\n      return {\n        activeSource: undefined,\n        activeTarget: undefined\n      }\n    }\n  }\n\n  handleSourceButtonClick(value) {\n    this.setState((state, props) => {\n      if (!state.activeSource && state.activeTarget) {\n        // Answer is ready\n        return this.checkAnswer(state, props, value, state.activeTarget);\n      }\n      else {\n        return {\n          activeSource: value\n        };\n      }\n    }, () => {\n      if (!this.state.shuffledSources.length)\n        this.props.onSubmit(this.result);\n    });\n  }\n\n  handleTargetButtonClick(value) {\n    this.setState((state, props) => {\n      if (state.activeSource && !state.activeTarget) {\n        // Answer is ready\n        return this.checkAnswer(state, props, state.activeSource, value);\n      }\n      else {\n        return {\n          activeTarget: value\n        };\n      }\n    }, () => {\n      if (!this.state.shuffledSources.length)\n        this.props.onSubmit(this.result);\n    });\n  }\n\n  render() {\n    return(\n      <table>\n        <tbody>\n          {this.state.shuffledSources.map((source, i) =>\n            <tr key={source}>\n              <td>\n                <ToggleButton\n                  value={this.state.shuffledSources[i]}\n                  onClick={(value) => this.handleSourceButtonClick(value)}\n                  active={this.state.activeSource === this.state.shuffledSources[i]} />\n              </td>\n              <td>\n                <ToggleButton\n                  value={this.state.shuffledTargets[i]}\n                  onClick={(value) => this.handleTargetButtonClick(value)}\n                  active={this.state.activeTarget === this.state.shuffledTargets[i]} />\n              </td>\n            </tr>)}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default MatchCardsExercise;\n\n// <form onSubmit={this.handleSubmit}>\n","import React from \"react\";\nimport {randomInteger} from \"../util/random\";\n\nclass SelectDefinitionExercise extends React.Component {\n\n  render() {\n    const sourceCard = this.props.sourceCard;\n    const falseTargets = this.props.falseTargets;\n\n    const randomPosition = randomInteger(0, falseTargets.length);\n    falseTargets.splice(randomPosition, 0, sourceCard.target);\n    const options = falseTargets;\n\n    return(\n      <div>\n        <div>{sourceCard.source}</div>\n        {options.map(target =>\n          <div key={target}>{target}</div>)}\n      </div>\n    );\n  }\n}\n\nexport default SelectDefinitionExercise;\n\n// <form onSubmit={this.handleSubmit}>\n","import React from \"react\";\nimport Box from \"./Box\";\nimport BoxModel from \"../models/BoxModel\";\nimport AddCardForm from \"./AddCardForm\";\nimport SelectDefinitionExercise from \"./SelectDefinitionExercise\";\nimport MatchCardsExercise from \"./MatchCardsExercise\";\nimport {weightedRandomChoice} from \"../util/random\";\n\n\nclass FlipcardsApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boxes = props.boxes.map(box =>\n      new BoxModel(box.cards, parseFloat(box.probability)));\n\n    this.state = {\n      boxSizes: this.boxes.map(() => 0)\n    };\n  }\n\n  componentDidMount() {\n    this.updateBoxSizes();\n  }\n\n  updateBoxSizes() {\n    this.setState({\n      boxSizes: this.boxes.map(box => box.numberOfCards)\n    });\n  }\n\n  chooseRandomNonEmptyBox() {\n    const nonEmptyBoxes = this.boxes.filter(box => !box.isEmpty());\n    const probabilities = nonEmptyBoxes.map(box => box.probability);\n    return weightedRandomChoice(nonEmptyBoxes, probabilities);\n  }\n\n  chooseRandomCard() {\n    const box = this.chooseRandomNonEmptyBox();\n    return box.chooseRandomCard();\n  }\n\n  chooseRandomCardsWithoutRepetition(numberOfCards) {\n    const weightedCards = this.boxes.map(box =>\n      box.cards.map(card => ({\n        card: card,\n        weight: box.probability\n      }))).flat();\n\n    const uniqueWeightedCards = weightedCards.reduce((unique, item) =>\n      unique.some(_item => _item.card.source === item.card.source)\n      ? unique\n      : [...unique, item], []);\n\n    const uniqueCards = uniqueWeightedCards.map(item => item.card);\n    const weights = uniqueWeightedCards.map(item => item.weight);\n\n    if (uniqueCards.length <= numberOfCards)\n      return uniqueCards;\n\n    let randomCard, randomCardIndex;\n    const randomCards = [];\n\n    for (let i = 0; i < numberOfCards; ++i) {\n      randomCard = weightedRandomChoice(uniqueCards, weights);\n      randomCards.push(randomCard);\n\n      // Remove the card that was selected\n      randomCardIndex = uniqueCards.indexOf(randomCard);\n      uniqueCards.splice(randomCardIndex, 1);\n      weights.splice(randomCardIndex, 1);\n    }\n    return randomCards;\n  }\n\n  validateNewCard(card) {\n    if (this.boxes.some(box => box.includesCardWithSource(card.source))) {\n      throw `A card with source \"${card.source}\" already exists`;\n    }\n  }\n\n  addCard(card) {\n    this.validateNewCard(card);\n\n    this.boxes[0].addCard({\n      source: card.source,\n      target: card.target\n    });\n\n    this.updateBoxSizes();\n  }\n\n  moveCard(card, fromBoxNumber, toBoxNumber) {\n    this.boxes[fromBoxNumber].removeCard(card);\n    this.boxes[toBoxNumber].addCard(card);\n\n    this.updateBoxSizes();\n  }\n\n  moveCardForward(card) {\n    const currentBoxNumber = this.boxes.findIndex(box => box.includesCard(card));\n\n    if (currentBoxNumber === this.boxes.length - 1)\n      return;\n\n    const nextBoxNumber = currentBoxNumber + 1;\n    this.moveCard(card, currentBoxNumber, nextBoxNumber);\n  }\n\n  moveCardBackward(card) {\n    const currentBoxNumber = this.boxes.findIndex(box => box.includesCard(card));\n\n    if (currentBoxNumber === 0)\n      return;\n\n    this.moveCard(card, currentBoxNumber, 0);\n  }\n\n  handleExerciseResult(cards) {\n    cards.passed.forEach(card => this.moveCardForward(card));\n    cards.failed.forEach(card => this.moveCardBackward(card));\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.boxSizes.map((boxSize, i) =>\n          <Box key={i} numberOfCards={boxSize} />\n        )}\n\n        <AddCardForm\n          onSubmit={(card) => this.addCard(card)} />\n\n        <MatchCardsExercise\n          cards={this.chooseRandomCardsWithoutRepetition(10)}\n          onSubmit={(cards) => this.handleExerciseResult(cards)} />\n      </div>\n    );\n  }\n}\n\n// <SelectDefinitionExercise\n//   sourceCard={this.chooseRandomCard()}\n//   falseTargets={this.chooseRandomCards(4).map(card => card.target)} />\n\nexport default FlipcardsApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport FlipcardsApp from './components/FlipcardsApp';\n\nimport './style.css';\nimport boxes from \"./data/boxes.json\";\n\nconst useStrictMode = true;\nlet app = <FlipcardsApp boxes={boxes} />;\n\nif (useStrictMode) {\n  app = (<React.StrictMode>\n    {app}\n  </React.StrictMode>);\n}\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}